// Package grains is generated by protoactor-go/protoc-gen-gograin@0.1.0
package grains

import (
	"errors"
	"fmt"
	"math"
	"time"
	"log/slog"

	"github.com/asynkron/protoactor-go/actor"
	"github.com/asynkron/protoactor-go/cluster"
	"google.golang.org/protobuf/proto"
)

var (
	_    = proto.Marshal
	_    = fmt.Errorf
	_    = math.Inf
)

var xVehicleFactory func() Vehicle

// VehicleFactory produces a Vehicle
func VehicleFactory(factory func() Vehicle) {
	xVehicleFactory = factory
}

// GetVehicleGrainClient instantiates a new VehicleGrainClient with given Identity
func GetVehicleGrainClient(c *cluster.Cluster, id string) *VehicleGrainClient {
	if c == nil {
		panic(fmt.Errorf("nil cluster instance"))
	}
	if id == "" {
		panic(fmt.Errorf("empty id"))
	}
	return &VehicleGrainClient{Identity: id, cluster: c}
}

// GetVehicleKind instantiates a new cluster.Kind for Vehicle
func GetVehicleKind(opts ...actor.PropsOption) *cluster.Kind {
	props := actor.PropsFromProducer(func() actor.Actor {
		return &VehicleActor{
			Timeout: 60 * time.Second,
		}
	}, opts...)
	kind := cluster.NewKind("Vehicle", props)
	return kind
}

// GetVehicleKind instantiates a new cluster.Kind for Vehicle
func NewVehicleKind(factory func() Vehicle, timeout time.Duration ,opts ...actor.PropsOption) *cluster.Kind {
	xVehicleFactory = factory
	props := actor.PropsFromProducer(func() actor.Actor {
		return &VehicleActor{
			Timeout: timeout,
		}
	}, opts...)
	kind := cluster.NewKind("Vehicle", props)
	return kind
}

// Vehicle interfaces the services available to the Vehicle
type Vehicle interface {
	Init(ctx cluster.GrainContext)
	Terminate(ctx cluster.GrainContext)
	ReceiveDefault(ctx cluster.GrainContext)
	OnPosition(*Position, cluster.GrainContext) (*Empty, error)
	GetPositionsHistory(*GetPositionsHistoryRequest, cluster.GrainContext) (*PositionBatch, error)
	
}

// VehicleGrainClient holds the base data for the VehicleGrain
type VehicleGrainClient struct {
	Identity      string
	cluster *cluster.Cluster
}

// OnPosition requests the execution on to the cluster with CallOptions
func (g *VehicleGrainClient) OnPosition(r *Position, opts ...cluster.GrainCallOption) (*Empty, error) {
	bytes, err := proto.Marshal(r)
	if err != nil {
		return nil, err
	}
	reqMsg := &cluster.GrainRequest{MethodIndex: 0, MessageData: bytes}
	resp, err := g.cluster.Request(g.Identity, "Vehicle", reqMsg, opts...)
	if err != nil {
		return nil, err
	}
	switch msg := resp.(type) {
	case *cluster.GrainResponse:
		result := &Empty{}
		err = proto.Unmarshal(msg.MessageData, result)
		if err != nil {
			return nil, err
		}
		return result, nil
	case *cluster.GrainErrorResponse:
		return nil, errors.New(msg.Err)
	default:
		return nil, errors.New("unknown response")
	}
}

// GetPositionsHistory requests the execution on to the cluster with CallOptions
func (g *VehicleGrainClient) GetPositionsHistory(r *GetPositionsHistoryRequest, opts ...cluster.GrainCallOption) (*PositionBatch, error) {
	bytes, err := proto.Marshal(r)
	if err != nil {
		return nil, err
	}
	reqMsg := &cluster.GrainRequest{MethodIndex: 1, MessageData: bytes}
	resp, err := g.cluster.Request(g.Identity, "Vehicle", reqMsg, opts...)
	if err != nil {
		return nil, err
	}
	switch msg := resp.(type) {
	case *cluster.GrainResponse:
		result := &PositionBatch{}
		err = proto.Unmarshal(msg.MessageData, result)
		if err != nil {
			return nil, err
		}
		return result, nil
	case *cluster.GrainErrorResponse:
		return nil, errors.New(msg.Err)
	default:
		return nil, errors.New("unknown response")
	}
}


// VehicleActor represents the actor structure
type VehicleActor struct {
	ctx     cluster.GrainContext
	inner   Vehicle
	Timeout time.Duration
}

// Receive ensures the lifecycle of the actor for the received message
func (a *VehicleActor) Receive(ctx actor.Context) {
	switch msg := ctx.Message().(type) {
	case *actor.Started: //pass
	case *cluster.ClusterInit:
		a.ctx = cluster.NewGrainContext(ctx, msg.Identity, msg.Cluster)
		a.inner = xVehicleFactory()
		a.inner.Init(a.ctx)

		if a.Timeout > 0 {
			ctx.SetReceiveTimeout(a.Timeout)
		}
	case *actor.ReceiveTimeout:		
		ctx.Poison(ctx.Self())
	case *actor.Stopped:
		a.inner.Terminate(a.ctx)
	case actor.AutoReceiveMessage: // pass
	case actor.SystemMessage: // pass

	case *cluster.GrainRequest:
		switch msg.MethodIndex {
		case 0:
			req := &Position{}
			err := proto.Unmarshal(msg.MessageData, req)
			if err != nil {
				ctx.Logger().Error("[Grain] OnPosition(Position) proto.Unmarshal failed.", slog.Any("error", err))
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			r0, err := a.inner.OnPosition(req, a.ctx)
			if err != nil {
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			bytes, err := proto.Marshal(r0)
			if err != nil {
				ctx.Logger().Error("[Grain] OnPosition(Position) proto.Marshal failed", slog.Any("error", err))
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			resp := &cluster.GrainResponse{MessageData: bytes}
			ctx.Respond(resp)
		case 1:
			req := &GetPositionsHistoryRequest{}
			err := proto.Unmarshal(msg.MessageData, req)
			if err != nil {
				ctx.Logger().Error("[Grain] GetPositionsHistory(GetPositionsHistoryRequest) proto.Unmarshal failed.", slog.Any("error", err))
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			r0, err := a.inner.GetPositionsHistory(req, a.ctx)
			if err != nil {
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			bytes, err := proto.Marshal(r0)
			if err != nil {
				ctx.Logger().Error("[Grain] GetPositionsHistory(GetPositionsHistoryRequest) proto.Marshal failed", slog.Any("error", err))
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			resp := &cluster.GrainResponse{MessageData: bytes}
			ctx.Respond(resp)
		
		}
	default:
		a.inner.ReceiveDefault(a.ctx)
	}
}
var xOrganizationFactory func() Organization

// OrganizationFactory produces a Organization
func OrganizationFactory(factory func() Organization) {
	xOrganizationFactory = factory
}

// GetOrganizationGrainClient instantiates a new OrganizationGrainClient with given Identity
func GetOrganizationGrainClient(c *cluster.Cluster, id string) *OrganizationGrainClient {
	if c == nil {
		panic(fmt.Errorf("nil cluster instance"))
	}
	if id == "" {
		panic(fmt.Errorf("empty id"))
	}
	return &OrganizationGrainClient{Identity: id, cluster: c}
}

// GetOrganizationKind instantiates a new cluster.Kind for Organization
func GetOrganizationKind(opts ...actor.PropsOption) *cluster.Kind {
	props := actor.PropsFromProducer(func() actor.Actor {
		return &OrganizationActor{
			Timeout: 60 * time.Second,
		}
	}, opts...)
	kind := cluster.NewKind("Organization", props)
	return kind
}

// GetOrganizationKind instantiates a new cluster.Kind for Organization
func NewOrganizationKind(factory func() Organization, timeout time.Duration ,opts ...actor.PropsOption) *cluster.Kind {
	xOrganizationFactory = factory
	props := actor.PropsFromProducer(func() actor.Actor {
		return &OrganizationActor{
			Timeout: timeout,
		}
	}, opts...)
	kind := cluster.NewKind("Organization", props)
	return kind
}

// Organization interfaces the services available to the Organization
type Organization interface {
	Init(ctx cluster.GrainContext)
	Terminate(ctx cluster.GrainContext)
	ReceiveDefault(ctx cluster.GrainContext)
	OnPosition(*Position, cluster.GrainContext) (*Empty, error)
	GetGeofences(*GetGeofencesRequest, cluster.GrainContext) (*GetGeofencesResponse, error)
	
}

// OrganizationGrainClient holds the base data for the OrganizationGrain
type OrganizationGrainClient struct {
	Identity      string
	cluster *cluster.Cluster
}

// OnPosition requests the execution on to the cluster with CallOptions
func (g *OrganizationGrainClient) OnPosition(r *Position, opts ...cluster.GrainCallOption) (*Empty, error) {
	bytes, err := proto.Marshal(r)
	if err != nil {
		return nil, err
	}
	reqMsg := &cluster.GrainRequest{MethodIndex: 0, MessageData: bytes}
	resp, err := g.cluster.Request(g.Identity, "Organization", reqMsg, opts...)
	if err != nil {
		return nil, err
	}
	switch msg := resp.(type) {
	case *cluster.GrainResponse:
		result := &Empty{}
		err = proto.Unmarshal(msg.MessageData, result)
		if err != nil {
			return nil, err
		}
		return result, nil
	case *cluster.GrainErrorResponse:
		return nil, errors.New(msg.Err)
	default:
		return nil, errors.New("unknown response")
	}
}

// GetGeofences requests the execution on to the cluster with CallOptions
func (g *OrganizationGrainClient) GetGeofences(r *GetGeofencesRequest, opts ...cluster.GrainCallOption) (*GetGeofencesResponse, error) {
	bytes, err := proto.Marshal(r)
	if err != nil {
		return nil, err
	}
	reqMsg := &cluster.GrainRequest{MethodIndex: 1, MessageData: bytes}
	resp, err := g.cluster.Request(g.Identity, "Organization", reqMsg, opts...)
	if err != nil {
		return nil, err
	}
	switch msg := resp.(type) {
	case *cluster.GrainResponse:
		result := &GetGeofencesResponse{}
		err = proto.Unmarshal(msg.MessageData, result)
		if err != nil {
			return nil, err
		}
		return result, nil
	case *cluster.GrainErrorResponse:
		return nil, errors.New(msg.Err)
	default:
		return nil, errors.New("unknown response")
	}
}


// OrganizationActor represents the actor structure
type OrganizationActor struct {
	ctx     cluster.GrainContext
	inner   Organization
	Timeout time.Duration
}

// Receive ensures the lifecycle of the actor for the received message
func (a *OrganizationActor) Receive(ctx actor.Context) {
	switch msg := ctx.Message().(type) {
	case *actor.Started: //pass
	case *cluster.ClusterInit:
		a.ctx = cluster.NewGrainContext(ctx, msg.Identity, msg.Cluster)
		a.inner = xOrganizationFactory()
		a.inner.Init(a.ctx)

		if a.Timeout > 0 {
			ctx.SetReceiveTimeout(a.Timeout)
		}
	case *actor.ReceiveTimeout:		
		ctx.Poison(ctx.Self())
	case *actor.Stopped:
		a.inner.Terminate(a.ctx)
	case actor.AutoReceiveMessage: // pass
	case actor.SystemMessage: // pass

	case *cluster.GrainRequest:
		switch msg.MethodIndex {
		case 0:
			req := &Position{}
			err := proto.Unmarshal(msg.MessageData, req)
			if err != nil {
				ctx.Logger().Error("[Grain] OnPosition(Position) proto.Unmarshal failed.", slog.Any("error", err))
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			r0, err := a.inner.OnPosition(req, a.ctx)
			if err != nil {
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			bytes, err := proto.Marshal(r0)
			if err != nil {
				ctx.Logger().Error("[Grain] OnPosition(Position) proto.Marshal failed", slog.Any("error", err))
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			resp := &cluster.GrainResponse{MessageData: bytes}
			ctx.Respond(resp)
		case 1:
			req := &GetGeofencesRequest{}
			err := proto.Unmarshal(msg.MessageData, req)
			if err != nil {
				ctx.Logger().Error("[Grain] GetGeofences(GetGeofencesRequest) proto.Unmarshal failed.", slog.Any("error", err))
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			r0, err := a.inner.GetGeofences(req, a.ctx)
			if err != nil {
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			bytes, err := proto.Marshal(r0)
			if err != nil {
				ctx.Logger().Error("[Grain] GetGeofences(GetGeofencesRequest) proto.Marshal failed", slog.Any("error", err))
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
				return
			}
			resp := &cluster.GrainResponse{MessageData: bytes}
			ctx.Respond(resp)
		
		}
	default:
		a.inner.ReceiveDefault(a.ctx)
	}
}
